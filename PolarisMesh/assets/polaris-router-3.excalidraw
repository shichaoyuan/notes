{
  "type": "excalidraw",
  "version": 2,
  "source": "http://localhost:3000",
  "elements": [
    {
      "id": "3Ru0E8KGpRcEbqPPWMyhw",
      "type": "rectangle",
      "x": 433.56640625,
      "y": 513.5859375,
      "width": 920,
      "height": 675,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "dotted",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1300352922,
      "version": 449,
      "versionNonce": 777866074,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "k5b1ftj9GRKTh4tn6pQie"
        }
      ],
      "updated": 1647599221085,
      "link": null
    },
    {
      "id": "k5b1ftj9GRKTh4tn6pQie",
      "type": "text",
      "x": 438.56640625,
      "y": 518.5859375,
      "width": 910,
      "height": 665,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2025241414,
      "version": 224,
      "versionNonce": 2114899994,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1647599221085,
      "link": null,
      "text": "public RouteResult router(RouteInfo routeInfo, ServiceInstances instances) {\n    // 根据匹配过程修改状态, 默认无路由策略状态\n    RuleStatus ruleStatus;\n    // 优先匹配inbound规则, 成功则不需要继续匹配outbound规则\n    List<Instance> destFilteredInstances = null;\n    List<Instance> sourceFilteredInstances = null;\n    if (routeInfo.getDestRouteRule() != null) {\n        destFilteredInstances = getRuleFilteredInstances(routeInfo, instances,\n                RuleMatchType.destRouteRuleMatch);\n        if (destFilteredInstances.isEmpty()) {\n            ruleStatus = RuleStatus.destRuleFail;\n        } else {\n            ruleStatus = RuleStatus.destRuleSucc;\n        }\n    } else {\n        // 然后匹配outbound规则\n        sourceFilteredInstances = getRuleFilteredInstances(routeInfo, instances,\n                RuleMatchType.sourceRouteRuleMatch);\n        if (sourceFilteredInstances.isEmpty()) {\n            ruleStatus = RuleStatus.sourceRuleFail;\n        } else {\n            ruleStatus = RuleStatus.sourceRuleSucc;\n        }\n    }\n    switch (ruleStatus) {\n        case sourceRuleSucc:\n            return new RouteResult(sourceFilteredInstances, RouteResult.State.Next);\n        case destRuleSucc:\n            return new RouteResult(destFilteredInstances, RouteResult.State.Next);\n        default:\n            LOG.error(\"route rule not match, rule status: {}, not matched source {}\", ruleStatus,\n                    routeInfo.getSourceService());\n            return new RouteResult(Collections.emptyList(), RouteResult.State.Next);\n    }\n}",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "middle",
      "baseline": 661,
      "containerId": "3Ru0E8KGpRcEbqPPWMyhw",
      "originalText": "public RouteResult router(RouteInfo routeInfo, ServiceInstances instances) {\n    // 根据匹配过程修改状态, 默认无路由策略状态\n    RuleStatus ruleStatus;\n    // 优先匹配inbound规则, 成功则不需要继续匹配outbound规则\n    List<Instance> destFilteredInstances = null;\n    List<Instance> sourceFilteredInstances = null;\n    if (routeInfo.getDestRouteRule() != null) {\n        destFilteredInstances = getRuleFilteredInstances(routeInfo, instances,\n                RuleMatchType.destRouteRuleMatch);\n        if (destFilteredInstances.isEmpty()) {\n            ruleStatus = RuleStatus.destRuleFail;\n        } else {\n            ruleStatus = RuleStatus.destRuleSucc;\n        }\n    } else {\n        // 然后匹配outbound规则\n        sourceFilteredInstances = getRuleFilteredInstances(routeInfo, instances,\n                RuleMatchType.sourceRouteRuleMatch);\n        if (sourceFilteredInstances.isEmpty()) {\n            ruleStatus = RuleStatus.sourceRuleFail;\n        } else {\n            ruleStatus = RuleStatus.sourceRuleSucc;\n        }\n    }\n    switch (ruleStatus) {\n        case sourceRuleSucc:\n            return new RouteResult(sourceFilteredInstances, RouteResult.State.Next);\n        case destRuleSucc:\n            return new RouteResult(destFilteredInstances, RouteResult.State.Next);\n        default:\n            LOG.error(\"route rule not match, rule status: {}, not matched source {}\", ruleStatus,\n                    routeInfo.getSourceService());\n            return new RouteResult(Collections.emptyList(), RouteResult.State.Next);\n    }\n}"
    },
    {
      "id": "HCTR_MIkiWk7La5F-SxnP",
      "type": "rectangle",
      "x": 1421.609375,
      "y": 518.81640625,
      "width": 1089,
      "height": 1340,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "dotted",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 330977306,
      "version": 316,
      "versionNonce": 1259951750,
      "isDeleted": false,
      "boundElements": [
        {
          "type": "text",
          "id": "LaoGd-HgQIP0iEaxBoD5m"
        }
      ],
      "updated": 1647599221085,
      "link": null
    },
    {
      "id": "LaoGd-HgQIP0iEaxBoD5m",
      "type": "text",
      "x": 1426.609375,
      "y": 523.81640625,
      "width": 1079,
      "height": 1330,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1231827334,
      "version": 215,
      "versionNonce": 1006147014,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1647599221085,
      "link": null,
      "text": "private List<Instance> getRuleFilteredInstances(RouteInfo routeInfo, ServiceInstances instances,\n        RuleMatchType ruleMatchType) throws PolarisException {\n    // 获取路由规则\n    List<RoutingProto.Route> routes = getRoutesFromRule(routeInfo, ruleMatchType);\n    if (CollectionUtils.isEmpty(routes)) {\n        return Collections.emptyList();\n    }\n    Map<String, String> multiEnvRouterParamMap = new HashMap<>();\n    for (RoutingProto.Route route : routes) {\n        if (route == null) {\n            continue;\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getRuleFilteredInstances, route:{}\", route.toString());\n        }\n\n        // 匹配source规则\n        boolean sourceMatched = matchSource(route.getSourcesList(), routeInfo.getSourceService(), ruleMatchType,\n                multiEnvRouterParamMap);\n        if (!sourceMatched) {\n            continue;\n        }\n\n        // 如果source匹配成功, 继续匹配destination规则\n        // 然后将结果写进map(key: 权重, value: 带权重的实例分组)\n        Map<Integer, PrioritySubsets> subsetsMap = new HashMap<>();\n        int smallestPriority = -1;\n        for (RoutingProto.Destination dest : route.getDestinationsList()) {\n            if (dest == null) {\n                continue;\n            }\n\n            // 对于outbound规则, 需要匹配DestService服务\n            if (ruleMatchType == RuleMatchType.sourceRouteRuleMatch) {\n                if (!RuleUtils.MATCH_ALL.equals(dest.getNamespace().getValue()) && !dest.getNamespace().getValue()\n                        .equals(routeInfo.getDestService().getNamespace())) {\n                    continue;\n                }\n\n                if (!RuleUtils.MATCH_ALL.equals(dest.getService().getValue()) && !dest.getService().getValue()\n                        .equals(routeInfo.getDestService().getService())) {\n                    continue;\n                }\n            }\n\n            if (dest.getWeight().getValue() == 0) {\n                continue;\n            }\n\n            boolean populated = populateSubsetsFromDest(instances, dest, subsetsMap, multiEnvRouterParamMap);\n            if (populated) {\n                int priority = dest.getPriority().getValue();\n                if (smallestPriority < 0 || smallestPriority > priority) {\n                    smallestPriority = priority;\n                }\n            }\n        }\n\n        // 如果未匹配到分组, 继续匹配\n        if (MapUtils.isEmpty(subsetsMap)) {\n            continue;\n        }\n        // 匹配到分组, 返回\n        return selectInstances(routeInfo, subsetsMap.get(smallestPriority));\n    }\n\n    // 全部匹配完成, 未匹配到任何分组, 返回空\n    return Collections.emptyList();\n}",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 1326,
      "containerId": "HCTR_MIkiWk7La5F-SxnP",
      "originalText": "private List<Instance> getRuleFilteredInstances(RouteInfo routeInfo, ServiceInstances instances,\n        RuleMatchType ruleMatchType) throws PolarisException {\n    // 获取路由规则\n    List<RoutingProto.Route> routes = getRoutesFromRule(routeInfo, ruleMatchType);\n    if (CollectionUtils.isEmpty(routes)) {\n        return Collections.emptyList();\n    }\n    Map<String, String> multiEnvRouterParamMap = new HashMap<>();\n    for (RoutingProto.Route route : routes) {\n        if (route == null) {\n            continue;\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getRuleFilteredInstances, route:{}\", route.toString());\n        }\n\n        // 匹配source规则\n        boolean sourceMatched = matchSource(route.getSourcesList(), routeInfo.getSourceService(), ruleMatchType,\n                multiEnvRouterParamMap);\n        if (!sourceMatched) {\n            continue;\n        }\n\n        // 如果source匹配成功, 继续匹配destination规则\n        // 然后将结果写进map(key: 权重, value: 带权重的实例分组)\n        Map<Integer, PrioritySubsets> subsetsMap = new HashMap<>();\n        int smallestPriority = -1;\n        for (RoutingProto.Destination dest : route.getDestinationsList()) {\n            if (dest == null) {\n                continue;\n            }\n\n            // 对于outbound规则, 需要匹配DestService服务\n            if (ruleMatchType == RuleMatchType.sourceRouteRuleMatch) {\n                if (!RuleUtils.MATCH_ALL.equals(dest.getNamespace().getValue()) && !dest.getNamespace().getValue()\n                        .equals(routeInfo.getDestService().getNamespace())) {\n                    continue;\n                }\n\n                if (!RuleUtils.MATCH_ALL.equals(dest.getService().getValue()) && !dest.getService().getValue()\n                        .equals(routeInfo.getDestService().getService())) {\n                    continue;\n                }\n            }\n\n            if (dest.getWeight().getValue() == 0) {\n                continue;\n            }\n\n            boolean populated = populateSubsetsFromDest(instances, dest, subsetsMap, multiEnvRouterParamMap);\n            if (populated) {\n                int priority = dest.getPriority().getValue();\n                if (smallestPriority < 0 || smallestPriority > priority) {\n                    smallestPriority = priority;\n                }\n            }\n        }\n\n        // 如果未匹配到分组, 继续匹配\n        if (MapUtils.isEmpty(subsetsMap)) {\n            continue;\n        }\n        // 匹配到分组, 返回\n        return selectInstances(routeInfo, subsetsMap.get(smallestPriority));\n    }\n\n    // 全部匹配完成, 未匹配到任何分组, 返回空\n    return Collections.emptyList();\n}"
    },
    {
      "id": "jN7Vn44DZJMRDm6dAdN8h",
      "type": "text",
      "x": 1854.390625,
      "y": 675.11328125,
      "width": 209,
      "height": 23,
      "angle": 0,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "dotted",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 657257370,
      "version": 179,
      "versionNonce": 232329626,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1647599221085,
      "link": null,
      "text": "遍历匹配规则，匹配立即返回",
      "fontSize": 16,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 17,
      "containerId": null,
      "originalText": "遍历匹配规则，匹配立即返回"
    },
    {
      "id": "KozPsrmDaI-_u-_j-V_wk",
      "type": "rectangle",
      "x": 1500.5078125,
      "y": 844.51953125,
      "width": 984.3515625,
      "height": 61.31640625,
      "angle": 0,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 620620038,
      "version": 314,
      "versionNonce": 2125975130,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1647599221085,
      "link": null
    },
    {
      "id": "aC34blVNDMM5yV6vPUaYx",
      "type": "rectangle",
      "x": 1504.2890625,
      "y": 978.8046875,
      "width": 993.1093750000002,
      "height": 649.7226562500001,
      "angle": 0,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1210122650,
      "version": 281,
      "versionNonce": 1144413254,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1647599221085,
      "link": null
    },
    {
      "id": "MPf8ZDRiqdFf6bfux_pyS",
      "type": "text",
      "x": 2054.6875,
      "y": 1017.55859375,
      "width": 161,
      "height": 23,
      "angle": 0,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 140492698,
      "version": 413,
      "versionNonce": 1039406982,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1647599224278,
      "link": null,
      "text": "存储匹配的每个子集合",
      "fontSize": 16,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 17,
      "containerId": null,
      "originalText": "存储匹配的每个子集合"
    },
    {
      "type": "text",
      "version": 572,
      "versionNonce": 2006221510,
      "isDeleted": false,
      "id": "uRZFsSkJqIQBNOkL1eTan",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1575.8984375,
      "y": 1761.22265625,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 289,
      "height": 23,
      "seed": 1860489094,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1647599221085,
      "link": null,
      "fontSize": 16,
      "fontFamily": 1,
      "text": "基于每个子集合配置的权重进行随机选择",
      "baseline": 17,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "基于每个子集合配置的权重进行随机选择"
    },
    {
      "type": "text",
      "version": 707,
      "versionNonce": 1543402650,
      "isDeleted": false,
      "id": "OQqJcFRTHLuFGy1KdHKgc",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1969.0859375,
      "y": 1715.34765625,
      "strokeColor": "#c92a2a",
      "backgroundColor": "transparent",
      "width": 145,
      "height": 23,
      "seed": 803604934,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "boundElements": [],
      "updated": 1647599221085,
      "link": null,
      "fontSize": 16,
      "fontFamily": 1,
      "text": "数值越小优先级越高",
      "baseline": 17,
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "数值越小优先级越高"
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}